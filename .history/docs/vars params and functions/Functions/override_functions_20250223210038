---
sidebar_position: 2
title: Overriding built-in functions
description: learn how to override a screen function

---

Screens in Nowa come with built-in functions that are automatically called at different points in the screen lifecycle. These functions allow the system to handle essential tasks like initializing the screen or cleaning up resources when the screen is no longer needed.

However, sometimes you may need to **attach extra logic** to specific lifecycle events of a screen or component. This is where **overriding functions** becomes useful.

## Common Lifecycle Functions

Two of the most commonly overridden functions in the screen lifecycle are:

- **`initState`**: This function gets called **when the screen or component is loaded for the first time**. You can use it to initialize data, start animations, or fetch initial data from an API.
- **`dispose`**: This function gets called **when the screen is about to be removed from memory**. It is used to clean up resources such as timers, listeners, or controllers to avoid memory leaks.

## How to Override Functions in Nowa

To override a lifecycle function in Nowa, follow these steps:

1. **Select the screen or component** where you want to override a function.
2. **Click on `+` next to "Functions"** inside the variables panel on the right side.
3. **Choose the function** you want to override, such as `initState` or `dispose`.
4. The function will now appear in the list. **Select it and click on "Edit"**.
5. You will see a **node with the same name as the function** (e.g., `initState`). This node represents the default initialization for the screen.
6. **Keep this node in its position** and **add additional nodes below it** to execute extra instructions at that specific lifecycle stage.

## Important Considerations

- When you override a function, **it usually does not have parameters and does not return a value**.
- If you need a function that accepts parameters and returns a value, **create a new screen function** instead of overriding a built-in lifecycle function. You can **call other functions inside an overridden function** to keep your logic modular and reusable.

## Example: Overriding `initState` for a Counter App

In this example, we override the `initState` function to start a counter process using a `Timer` object. The counter will begin counting as soon as the screen loads.

### Steps:

1. Override the `initState` function.
2. Keep the existing `initState` node in place.
3. Add a new node below it that starts a `Timer` to increment a counter value every second.

    <div style={{ position: 'relative', paddingBottom: 'calc(56.018518518518526% + 41px)', height: 0, width: '100%' }}>
      <iframe
        src="https://demo.arcade.software/yE2WLpSl7WS7kK10nckS?embed&embed_mobile=tab&embed_desktop=inline&show_copy_link=true"
        title="Adding override functionality"
        frameBorder="0"
        loading="lazy"
        allowFullScreen
        allow="clipboard-write"
        style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', colorScheme: 'light' }}
      />
    </div>


This ensures that the counter begins automatically when the screen appears without interfering with the screen's default setup.

By following these steps, you can efficiently extend the behavior of built-in lifecycle functions while ensuring the smooth functioning of your screens and components.

